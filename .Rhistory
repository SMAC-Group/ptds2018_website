install.packages("cronR")
blogdown:::serve_site()
q()
q()
100 / 100 * 6
93 / 100 * 6
94 / 100 * 6
60 / 100 * 6
q()
8/11
(8/11)Â²
(8/11)^2
(10/11)^2
(9/11)^2
(11/12)^2
(10/12)^2
q()
.95*50
.95*50*.05
pbinom(48,50,.95)
dbinom(48,50,.95)
1-pbinom(47,50,.95)
200*.95
1-ppois(184,190)
pnorm(-1/24)
q()
q()
q()
q()
q()
q()
1/6
seq(from = 10^3, to = 10^8, by = 10^3)
seq(from = 10^3, to = 10^8, by = 10^4)
seq(from = 10^4, to = 10^8, by = 10^4)
set.seed(seed)
# Simulate B points
point = matrix(runif(2*B, -1, 1), B, 2)
# Compute the number of points inside unit circle
nb_inside = apply(point, 1, inside_unit_circle)
pi_hat = sum(nb_inside)/B
# Make plot
if (make_plot){
plot(NA, xlim = c(-1.1,1.1), ylim = c(-1.1,1.1), xlab = "x", ylab = "y")
make_square()
cols = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.2)[1:2]
grid()
for (i in 1:B){
points(point[i,1], point[i,2], pch = 16, col = cols[1 + nb_inside[i]])
}
make_circle()
}
# return estimated value of pi
return(4*pi_hat)
}
find_pi = function(B = 5000, seed = 10, make_plot = FALSE){
# Control seed
set.seed(seed)
# Simulate B points
point = matrix(runif(2*B, -1, 1), B, 2)
# Compute the number of points inside unit circle
nb_inside = apply(point, 1, inside_unit_circle)
pi_hat = sum(nb_inside)/B
# Make plot
if (make_plot){
plot(NA, xlim = c(-1.1,1.1), ylim = c(-1.1,1.1), xlab = "x", ylab = "y")
make_square()
cols = hcl(h = seq(15, 375, length = 3), l = 65, c = 100, alpha = 0.2)[1:2]
grid()
for (i in 1:B){
points(point[i,1], point[i,2], pch = 16, col = cols[1 + nb_inside[i]])
}
make_circle()
}
# return estimated value of pi
return(4*pi_hat)
}
pi_hat <- matrix(nr=length(seq(from = 10^4, to = 10^8, by = 10^4)),nc=1)
for(i in seq(from = 10^4, to = 10^8, by = 10^4)){
pi_hat[i] <- find_pi(B = i)
}
make_circle = function(center = c(0,0), radius = 1,  nb_step = 300, col = "darkblue", fill = NULL, lty = 1){
my_points = seq(from = 0, to = 2*pi, length.out = nb_step)
coords = cbind(radius*cos(my_points) + center[1], radius*sin(my_points) + center[2])
lines(coords, col = col, lty = lty)
if (!is.null(fill)){
polygon(c(coords[,1]), c(coords[,2]), col = fill, border = NULL)
}
}
make_square = function(bottom_left = c(-1,-1), side = 2, col = "darkblue", fill = NULL){
lines(c(bottom_left, bottom_left), c(bottom_left + side, bottom_left), col = col)
lines(c(bottom_left + side, bottom_left), c(bottom_left + side, bottom_left + side), col = col)
lines(c(bottom_left + side, bottom_left + side), c(bottom_left, bottom_left + side), col = col)
lines(c(bottom_left, bottom_left + side), c(bottom_left, bottom_left), col = col)
if (!is.null(fill)){
polygon(c(bottom_left, bottom_left+side, bottom_left+side, bottom_left), c(bottom_left, bottom_left, bottom_left+side, bottom_left+side), border = NULL, col = fill)
}
}
inside_unit_circle = function(x){
# Compute squared distance from center
d = x[1]^2 + x[2]^2
(d < 1)
}
pi_hat <- matrix(nr=length(seq(from = 10^4, to = 10^8, by = 10^4)),nc=1)
for(i in seq(from = 10^4, to = 10^8, by = 10^4)){
pi_hat[i] <- find_pi(B = i)
}
pi_hat
i
B <- seq(from = 10^4, to = 10^8, by = 10^4)
pi_hat <- matrix(nr=length(B),nc=1)
for(i in seq_along(B)){
pi_hat[i] <- find_pi(B = B[i])
}
pi_hat
plot(pi_hat)
B <- seq(from = 10^4, to = 10^8, by = 10^6)
pi_hat <- matrix(nr=length(B),nc=1)
pi_hat
for(i in seq_along(B)){
pi_hat[i] <- find_pi(B = B[i])
}
pi_hat
pi
B <- seq(from = 10^3, to = 10^4, by = 10^3)
pi_hat <- matrix(nr=length(B),nc=1)
for(i in seq_along(B)){
pi_hat[i] <- find_pi(B = B[i])
}
pi_hat
plot(B,pi_hat,type="b")
abline(h=pi,lwd=2)
B <- seq(from = 10^2, to = 10^4, by = 10^2)
B
B <- seq(from = 10^2, to = 10^4, by = 10^2)
pi_hat <- matrix(nr=length(B),nc=1)
for(i in seq_along(B)){
pi_hat[i] <- find_pi(B = B[i])
}
plot(B,pi_hat,type="b")
abline(h=pi,lty=2)
plot(B,abs(pi_hat-pi),type="b")
abline(h=pi,lty=2)
q()
q()
q()
q()
